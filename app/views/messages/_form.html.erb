<%=content_for :for_head do %>
  <script type="module" src="https://unpkg.com/ionicons@7.1.0/dist/ionicons/ionicons.esm.js"></script>
  <script nomodule src="https://unpkg.com/ionicons@7.1.0/dist/ionicons/ionicons.js"></script>
<% end %>
<%= form_with(model: message, class: 'msg-form') do |form| %>
  <% if message.errors.any? %>
    <div style="color: red">
      <h2><%= pluralize(message.errors.count, "error") %> prohibited this message from being saved</h2>

      <ul>
        <% message.errors.each do |error| %>
          <li><%= error.full_message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <div>
    <%= form.text_area :body %>
    <%= form.submit "Invio", class: "btn-form"%>
    <button id='VoiceMessageIO' class='btn-register' onmousedown='StartRecording()' onmouseup='StopRecording()' ><ion-icon name="mic-outline"></ion-icon></button>
  </div>
<% end %>

<script>
var audioChunks = [];
var mediaRecorder;
var csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
  function StartRecording(){
    navigator.mediaDevices.getUserMedia({audio: true}).then(function(stream){
      audioChunks = [];

      mediaRecorder = new MediaRecorder(stream);

      mediaRecorder.addEventListener('dataavailable', function(event){
        if(event.data.size > 0){
          audioChunks.push(event.data);
        }
      })

      mediaRecorder.start();
    }).catch(function(error){
      console.error("Errore di registrazione vocale");
    })
  }

  function StopRecording(){
    if(mediaRecorder && mediaRecorder.state !== 'inactive'){
      mediaRecorder.stop();
      mediaRecorder.addEventListener('stop', function(){
        var audioBlob = new Blob(audioChunks, {type: 'audio/webm'})

      sendVoiceMessage(audioBlob)
      })
    }
    
  }
  
  function sendVoiceMessage(audioBlob){
    //const convo_id = document.getElementById('room-id').getAttribute('data-room-id')
    var messagesControllerPath = "<%= url_for(controller: 'messages', action: 'create_audio')%>"
    const message = new FormData()
    message.append('audio', audioBlob);
    fetch(messagesControllerPath, {
                method: 'POST',
                headers: {
                  'X-CSRF-Token': csrfToken
                },
                body: message
              })
              .then(function(response){
                console.log("All good")
                
              }).catch(function(error){
                console.log("Error sending audio data")
              })
  }
</script>
